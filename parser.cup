/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal IF, ELSE, LPAREN, RPAREN, PREFIX;
terminal REVERSE, PLUS;
terminal IDENTIFIER;
terminal String STRING_LITERAL;
terminal COMMA, LBRACKET, RBRACKET;

/*  Non terminals */
// non terminal main, lines;
non terminal main, lines, line, line2, line3, body, end_line, statements;
non terminal expr, expr_no_id, cond_stmt, reverse, concat, call, args, rest_args;
non terminal logical_expr;

/**
 *  Precedence Declarations
 */
precedence left PREFIX;
precedence left PLUS;
precedence left REVERSE;
// precedence left IDENTIFIER;


/**
 *  The Grammar Rules
 */

start with main;

main ::= lines:e {:
    //System.out.printf("-%s-\n", e);
:};

lines ::= line:e1 lines:e2  {:
    // System.out.println("public class Main { public static void main(String[] args) {");
    // System.out.println("}");
    RESULT = "-" + e1 + e2 + "- ";
    // System.out.printf("-%s-\n", e1);

:}
| /*empty*/ {:RESULT = ""; :};

line ::= IDENTIFIER:e1 LPAREN line2:e2 {: 
    RESULT = e1 + "(" + e2;
    System.out.printf("-%s-\n", RESULT);
:}
| expr_no_id:e1 {:
    RESULT = e1;
    System.out.printf("-%s-\n", RESULT);
:};

line2 ::= RPAREN body:e {: 
    RESULT = ")" + e;
:}
| LPAREN args:e1 RPAREN end_line:e2 {:
    RESULT = "(" + e1 + ")" + e2; 
:}
| LPAREN args:e1 RPAREN PLUS expr:e2 end_line:e3 {:
    RESULT = "(" + e1 + ")" + "+" + e2 + e3; 
:}
| PLUS expr:e1 end_line:e2{:
    RESULT = "+" + e1 + e2; 
:}
| expr_no_id:e1 end_line:e2 {:
    RESULT = e1.toString() + e2.toString(); 
:}
| IDENTIFIER line3:e {:
    RESULT = e; 
:};

line3 ::= COMMA IDENTIFIER:e1 line3:e2 {: 
    RESULT = ", " + e1 + e2;
:}
| LPAREN args:e1 RPAREN end_line:e2 {:
    RESULT = "(" + e1 + ")" + e2; 
:}
| LPAREN args:e1 RPAREN PLUS expr:e2 end_line:e3 {:
    RESULT = "(" + e1 + ")" + "+" + e2 + e3; 
:}
| PLUS expr:e1 end_line:e2{:
    RESULT = "+" + e1 + e2; 
:}
| expr_no_id:e1 end_line:e2 {:
    RESULT = e1.toString() + e2.toString(); 
:}
| RPAREN body:e {:
    RESULT = ")" + e;
:};

body ::= LBRACKET expr:e1 RBRACKET {: 
    RESULT = "{" + e1 + "}";
:}
| /*empty*/ {:RESULT = ""; :};

end_line ::= RPAREN:e1 {: 
    RESULT = ")" + e1;
:}
| COMMA expr:e1 end_line:e2 {:
    RESULT = ", " + e1 + e2; 
:};

// statements ::= expr:e1 statements:e2 {:
//     RESULT = e1.toString() + e2.toString();
//     System.out.printf("-%s-\n", RESULT);
// :}
// | /*empty*/ {:
//     RESULT = ""; 
// :};



// Expression WITH idientifiers
expr ::= reverse:e {:RESULT = e;:}
| concat:e {:RESULT = e;:}
| cond_stmt:e {:RESULT = e;:}
| call:e {:RESULT = e;:}
| IDENTIFIER:e {:RESULT = e;:}
| STRING_LITERAL:e {:RESULT = "\"" + e + "\"" + ";"; :};

// condition statement
cond_stmt ::= IF LPAREN logical_expr:e1 RPAREN expr:e2 ELSE expr:e3 {:
    RESULT = e1 + " ? " + e2 + " : " + e3;
:};

// Logical expression
logical_expr ::= expr:e1 PREFIX expr:e2 {:
    RESULT = e1 + ".startsWith(" + e2 + ")";
:};

// reverse operator
reverse ::= REVERSE expr:e {:
    RESULT = "new StringBuilder(" + e + ").reverse().toString()";
:};

// concatenation operator
concat ::= expr:e1 PLUS expr:e2 {:RESULT = e1 + "+" + e2; :};

// Function call
call ::= IDENTIFIER:e1 LPAREN args:e2 RPAREN {:
    RESULT = e1 + "(" + e2 + ")";
:};

// Arguments of functions' call (zero or more)
args ::= expr:e1 rest_args:e2 {:
    RESULT = e1.toString() + e2.toString();
:}
| /*empty*/ {:
    RESULT = ""; 
:};

rest_args ::= COMMA expr:e1 rest_args:e2 {:
    RESULT = ", " + e1 + e2;
:}
| /*empty*/ {:
    RESULT = "";
:};


// Expression WITHOUT idientifiers
expr_no_id ::= reverse:e {:RESULT = e; :}
// | concat_no_id:e {:RESULT = "return " + e + ";";:}
| cond_stmt:e {:RESULT = e; :}
// | call_no_id:e {:RESULT = "return " + e + ";";:}
| STRING_LITERAL:e {: System.out.printf("kostasddd\n"); RESULT = "\"" + e + "\""; :};